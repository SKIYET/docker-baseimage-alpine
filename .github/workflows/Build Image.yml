name: 构建 Docker 镜像

on:
  # 允许手动触发
  workflow_dispatch:
  # 推送到默认分支时触发 (除了 Action 自身的提交)
  push:
    branches:
      - main
  # 定期触发 (每月1号 00:00 UTC)
  schedule:
    - cron: '0 0 1 * *'

jobs:
  buildx:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要权限来推送代码更改 (version.txt, README.md)
      packages: write # 如果要推送到 GHCR 而不是 Docker Hub，需要这个

    steps:
      # 步骤 1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 需要获取提交历史来比较版本，并推送更改
          fetch-depth: 0 # 获取所有历史记录，以便进行提交和推送

      # 步骤 2: 安装必要的工具
      - name: 安装 jq
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends jq

      # 步骤 3: 设置 QEMU (用于多平台构建)
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 4: 设置 Docker Buildx (增强构建功能)
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        # 如果 buildx 实例已存在，重用它以可能利用缓存
        with:
          install: true

      # 步骤 5: 登录到 Docker Hub
      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 6: 检查最新的 Alpine 版本并设置输出
      - name: 获取最新 Alpine 版本并比较
        id: check-version
        run: |
          set -e # 如果任何命令失败，则立即退出脚本

          echo "正在从 Docker Hub API 获取 Alpine 标签 (不过滤名称)..."
          # 修改 API URL: 移除 name 参数，可能增加 page_size 获取更多标签
          # 注意：如果标签极多，可能需要处理分页 (next URL)，但通常前 100-250 个足够
          API_URL='https://hub.docker.com/v2/repositories/library/alpine/tags/?page_size=250&ordering=last_updated'
          RESPONSE=$(curl -fsSL --retry 3 --retry-delay 2 "$API_URL")

          if [ -z "$RESPONSE" ]; then
            echo "::error::无法从 Docker Hub API 获取标签信息。"
            exit 1
          fi

          echo "正在解析响应并过滤版本标签 (格式 X.Y)..."
          # 解析 JSON，提取所有 name 字段，然后在本地用 grep 过滤，再排序取最新
          LATEST_TAG=$(echo "$RESPONSE" | jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+$' | sort -Vr | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            # 如果这里 LATEST_TAG 仍然为空，可能是 API 真的没返回 X.Y 格式标签，或者 jq/grep/sort 出错
            echo "::error::无法从 Docker Hub API 响应中解析出有效的 Alpine 版本标签 (X.Y 格式)。"
            echo "Raw response JSON:"
            echo "$RESPONSE" | jq . # 打印格式化的 JSON 供调试
            exit 1
          fi
          echo "从 Docker Hub 获取到的最新有效版本: $LATEST_TAG"

          # 读取当前仓库中的版本
          if [ -f version.txt ]; then
            CURRENT_VERSION=$(cat version.txt)
            echo "当前仓库记录的版本: $CURRENT_VERSION"
          else
            CURRENT_VERSION=""
            echo "未找到 version.txt 文件，将视为需要更新。"
          fi

          # 比较版本并设置输出
          if [[ "$LATEST_TAG" == "$CURRENT_VERSION" ]]; then
            echo "版本未变化 ($LATEST_TAG)."
            echo "status=no-change" >> $GITHUB_OUTPUT
          else
            echo "检测到新版本: $LATEST_TAG (之前版本: $CURRENT_VERSION)."
            echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 步骤 7: 如果有新版本，更新仓库中的版本文件和 README
      - name: 更新版本文件和 README
        if: steps.check-version.outputs.status == 'success'
        run: |
          set -e
          VERSION=${{ steps.check-version.outputs.version }}
          DATE=$(date +"%Y-%m-%d")

          echo "正在更新 version.txt 和 README.md..."
          # 更新 version.txt
          echo "$VERSION" > version.txt

          # 更新 README.md (追加新条目)
          # 注意：这种追加方式比较简单，如果 README 结构复杂可能需要更健壮的更新方式
          echo -e "\n### $DATE 更新\n- Alpine 更新至 v$VERSION\n" >> README.md

          echo "配置 Git..."
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com" # 标准的 Actions Bot 邮箱
          git config --local user.name "github-actions[bot]"

          echo "提交更改..."
          git add version.txt README.md
          # 在 commit message 中加入 [skip ci] 来防止 push 触发新的 workflow run
          COMMIT_MESSAGE="$DATE 更新 Alpine v$VERSION [skip ci]"
          git commit -m "$COMMIT_MESSAGE"

          echo "推送更改到仓库..."
          # 使用 checkout 时传入的 PAT token
          git push origin HEAD:${{ github.ref_name }} # 推送到触发工作流的同一分支

      # 步骤 8: 如果有新版本，构建并推送 Docker 镜像
      - name: 构建并推送 Docker 镜像
        if: steps.check-version.outputs.status == 'success'
        uses: docker/build-push-action@v6
        with:
          context: . # 构建上下文为当前目录
          file: ./Dockerfile # 指定 Dockerfile 路径
          platforms: linux/amd64,linux/arm/v7,linux/arm64 # 构建的平台
          push: true # 推送镜像
          # 将获取到的新版本作为构建参数传递给 Dockerfile
          build-args: |
            VERSION=${{ steps.check-version.outputs.version }}
          # 为镜像打上版本标签和 latest 标签
          tags: |
            superng6/alpine:${{ steps.check-version.outputs.version }}
            superng6/alpine:latest
          # 启用 BuildKit 缓存 (可以加速后续构建)
          cache-from: type=gha
          cache-to: type=gha,mode=max