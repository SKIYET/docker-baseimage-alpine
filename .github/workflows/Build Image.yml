name: 手动构建 Docker 镜像

on:
  # 允许手动触发
  workflow_dispatch:
    
jobs:
  buildx:
    runs-on: ubuntu-latest
    permissions:
      # 不再需要写权限，因为我们不再提交文件
      contents: read
      packages: write # 推送到 GHCR 需要这个权限

    steps:
      # 步骤 1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤 2: 安装必要的工具
      - name: 安装 jq
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends jq

      # 步骤 3: 设置 QEMU (用于多平台构建)
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 4: 设置 Docker Buildx (增强构建功能)
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # 步骤 5: 登录到 Docker Hub
      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 6: 获取最新的 Alpine 版本
      - name: 获取最新的 Alpine 版本
        id: get-version
        run: |
          set -e # 如果任何命令失败，则立即退出脚本

          echo "正在从 Docker Hub API 获取最新的 Alpine 版本..."
          API_URL='https://hub.docker.com/v2/repositories/library/alpine/tags/?page_size=100&ordering=last_updated'
          RESPONSE=$(curl -fsSL --retry 3 --retry-delay 2 "$API_URL")

          if [ -z "$RESPONSE" ]; then
            echo "::error::无法从 Docker Hub API 获取标签信息。"
            exit 1
          fi

          # 解析 JSON，提取所有 name 字段，然后在本地用 grep 过滤，再排序取最新
          LATEST_TAG=$(echo "$RESPONSE" | jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+$' | sort -Vr | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            echo "::error::无法从 Docker Hub API 响应中解析出有效的 Alpine 版本标签 (X.Y 格式)。"
            exit 1
          fi
          
          echo "获取到的最新版本是: $LATEST_TAG"
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
        shell: bash

      # 步骤 7: 构建并推送 Docker 镜像
      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v6
        with:
          context: . # 构建上下文为当前目录
          file: ./Dockerfile # 指定 Dockerfile 路径
          platforms: linux/amd64,linux/arm/v7,linux/arm64 # 构建的平台
          push: true # 推送镜像
          # 将获取到的新版本作为构建参数传递给 Dockerfile
          build-args: |
            VERSION=${{ steps.get-version.outputs.version }}
          # 为镜像打上版本标签和 latest 标签
          tags: |
            superng6/alpine:${{ steps.get-version.outputs.version }}
            superng6/alpine:latest
          # 启用 BuildKit 缓存 (可以加速后续构建)
          cache-from: type=gha
          cache-to: type=gha,mode=max
