name: 构建 Docker 镜像

on:
  workflow_dispatch:
  # 定期触发 (每天 UTC 10:30)
  schedule:
    - cron: "30 10 * * *"
env:
  # Docker Hub 镜像名称
  DOCKER_IMAGE: skiyet/alpine
  # GitHub Container Registry (ghcr.io) 镜像名称
  GHCR_IMAGE: ghcr.io/skiyet/alpine

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.version-check.outputs.should_build }}
      full_version: ${{ steps.version-check.outputs.full_version }}
      minor_version: ${{ steps.version-check.outputs.minor_version }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查版本并决定是否构建
        id: version-check
        run: bash .github/workflows/version-check.sh ${{ env.DOCKER_IMAGE }}

  build:
    runs-on: ubuntu-latest
    # 只有当需要构建时才运行
    needs: check_version
    if: needs.check_version.outputs.should_build == 'true'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/386
          - linux/ppc64le
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: 构建并推送单架构镜像（by digest）
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          # 使用检查到的新版本号
          build-args: |
            VERSION=${{ needs.check_version.outputs.full_version }}
          tags: ${{ env.DOCKER_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}

      - name: 导出 digest
        id: prepare_artifact
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          IMAGE_DIGEST="${digest#*sha256:}"
          touch "/tmp/digests/${IMAGE_DIGEST}"

          # 计算平台标识符
          PLATFORM_PAIR=$(echo "${{ matrix.platform }}" | tr '/' '-')
          echo "platform_pair=${PLATFORM_PAIR}" >> $GITHUB_OUTPUT

      - name: 上传 digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.prepare_artifact.outputs.platform_pair }}
          path: /tmp/digests/*
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    # 依赖检查版本和构建作业
    needs: [check_version, build]
    if: needs.check_version.outputs.should_build == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 下载 digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 登录到 GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: 合并 manifest 并推送
        working-directory: /tmp/digests
        run: |
          echo "Digests found:"
          ls -1 .
          # 使用检查到的新版本号
          docker buildx imagetools create \
            -t "${{ env.DOCKER_IMAGE }}:${{ needs.check_version.outputs.full_version }}" \
            -t "${{ env.DOCKER_IMAGE }}:${{ needs.check_version.outputs.minor_version }}" \
            -t "${{ env.DOCKER_IMAGE }}:latest" \
            -t "${{ env.GHCR_IMAGE }}:${{ needs.check_version.outputs.full_version }}" \
            -t "${{ env.GHCR_IMAGE }}:${{ needs.check_version.outputs.minor_version }}" \
            -t "${{ env.GHCR_IMAGE }}:latest" \
            $(printf '${{ env.DOCKER_IMAGE }}@sha256:%s ' *)

      - name: 检查镜像
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:${{ needs.check_version.outputs.full_version }}
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:${{ needs.check_version.outputs.full_version }}

  # =========================================================
  # 更新 README.md
  # =========================================================
  update_readme:
    runs-on: ubuntu-latest
    # 依赖检查版本和合并作业
    needs: [check_version, merge]
    if: needs.check_version.outputs.should_build == 'true'
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 README 更新脚本
        run: bash .github/workflows/update-readme.sh ${{ needs.check_version.outputs.full_version }}

      - name: 提交并推送 README.md
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # 检查是否有文件变动
          if [[ -n $(git status --porcelain README.md) ]]; then
            git add README.md
            git commit -m "docs: 自动更新 README，添加 Alpine 版本 v${{ needs.check_version.outputs.full_version }}"
            git push
          else
            echo "README.md 文件无变化，无需提交。"
          fi

  # =========================================================
  # 通知作业 - 记录检查结果
  # =========================================================
  notify:
    runs-on: ubuntu-latest
    needs: [check_version]
    if: always()  # 无论检查结果如何都运行
    steps:
      - name: 记录检查结果
        run: |
          if [ "${{ needs.check_version.outputs.should_build }}" == "true" ]; then
            echo "✅ 检测到新版本 ${{ needs.check_version.outputs.full_version }}，已触发构建流程"
          else
            echo "ℹ️  版本检查完成，当前版本已是最新，无需构建"
          fi
